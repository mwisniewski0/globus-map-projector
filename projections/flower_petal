...SECTION TO-CALCULATIONS:
const float PI = 3.141592653589793238462643383279502884197169399;
float newX = coords.x;
float newY = coords.y;

float goreWidth = 1.0/goresNumber;

// check which half we're rendering
bool leftHalfProcessing = newX < 0.5;

// stretch half to entire width
newX = newX * 2.0;
goreWidth = goreWidth * 2.0;
if (!leftHalfProcessing)
{
   newX = newX - 1.0;
}

// we will check to which half-gore this point belongs
int currentGore = 0;
bool goreFound = false;

float angleBetweenGores = 2.0*PI/float(goresNumber);
for (int i = 0; i < int(goresNumber); ++i)
{
	// rotation around center
	float angle = angleBetweenGores * float(i);
	
	// rotate anti-clockwise for right half
	if (!leftHalfProcessing)
		angle = -angle;

	float tmpX = 0.5 + (newX-0.5)*cos(angle) + (newY-0.5)*sin(angle);
	float tmpY = 0.5 - (newX-0.5)*sin(angle) + (newY-0.5)*cos(angle);
	
	// surplus converted from degrees to (0,1) coords
	float convertedSurplus = 0.0;
	
	// we need to add surplus
	// calculate resultant y coord (check "flip" and "left half has southern...":
	float resultY = tmpY;
	resultY = 0.5 - resultY;
	if (leftHalfProcessing) resultY = 1.0 - resultY;
	// check if surplus is applicable
	if ((resultY >= startSurplus1/180.0 + 0.5 && resultY <= endSurplus2/180.0 + 0.5)
	     || (resultY >= startSurplus2/180.0 + 0.5 && resultY <= endSurplus2/180.0 + 0.5))
		convertedSurplus = surplus/180.0;
	
	// shrink if we cover the next gore
	// float distanceToNextGore = tan(angleBetweenGores/2.0) * (0.5 - tmpY);
	// float halfOfGoreWidthProjected =
		// (1.0/goresNumber)*cos(tmpY*PI); // correct some rounding problems with .01
	// float maximumSurplus = distanceToNextGore - halfOfGoreWidthProjected + 0.001; // + safety
	// if (maximumSurplus < 0.0)
		// maximumSurplus = 0.0;
	
	// if (convertedSurplus > maximumSurplus)
		// convertedSurplus = maximumSurplus;
		
	float xInEquirect = (tmpX-0.5)/cos(tmpY*PI)+goreWidth/2.0;
	if (xInEquirect >= -convertedSurplus && xInEquirect <= goreWidth + convertedSurplus && tmpY >= 0.0 && tmpY <= 0.5)
	{
		goreFound = true; // that's the right gore
		currentGore = i;

		// apply this rotation
		newX = xInEquirect;
		newY = tmpY;

		break;
	}
}
if (!goreFound)
{
	// this point should be blank
	return vec2(-1.0, -1.0);
}

// center fore on left edge
newX -= goreWidth/2.0;

// flip
newY = 0.5 - newY;
newX = -newX;

if (leftHalfProcessing)
{
	// left half has southern hemisphere, flip to bottom
	newY = 1.0 - newY;
	newX = -newX; // we don't want a mirror
}

// shrink back everything
goreWidth = goreWidth / 2.0;
newX = newX / 2.0;

// shift the gore to proper location
float midOfGore = (float(currentGore)+0.5)*goreWidth;
newX = newX + midOfGore;

// apply new central merdian
newX = newX + meridian / 360.0;
if (newX < 0.0)
{
	newX = 1.0 + newX;
}
else if (newX > 1.0)
{
	newX = newX - 1.0;
}
return vec2(newX, newY);

...SECTION FROM-CALCULATIONS:
return coords;

...SECTION TO-FORM:
Number of gores <input type="number" name="goresNumber" min="2" value="2"><br>
Pick surplus in degrees (0 - 15)<input name="surplus" type="number" min="0" max="15" step="0.01" value="0.9"><br>
Pick latitudes in which surplus will be added:<br>
Range 1: FROM (-90 - 90)
<input name="startSurplus1" type="number" min="-90" max="90" value="-90" step="0.1"> TO (-90 - 90)
<input name="endSurplus1" type="number" min="-90" max="90" value="90" step="0.1"><br>
Range 2: FROM (-90 - 90)
<input name="startSurplus2" type="number" min="-90" max="90" value="-90" step="0.1"> TO (-90 - 90)
<input name="endSurplus2" type="number" min="-90" max="90" value="90" step="0.1"><br><br>
Pick the central meridian <input name="meridian" type="number" min="-180" max="180">

...SECTION FROM-FORM:
Number of gores <input type="number" name="goresNumber" min="2" value="2"><br>
Pick surplus in degrees (0 - 15)<input name="surplus" type="number" min="0" max="15" step="0.01" value="0.9"><br>
Pick latitudes in which surplus will be added:<br>
Range 1: FROM (-90 - 90)
<input name="startSurplus1" type="number" min="-90" max="90" value="-90" step="0.1"> TO (-90 - 90)
<input name="endSurplus1" type="number" min="-90" max="90" value="90" step="0.1"><br>
Range 2: FROM (-90 - 90)
<input name="startSurplus2" type="number" min="-90" max="90" value="-90" step="0.1"> TO (-90 - 90)
<input name="endSurplus2" type="number" min="-90" max="90" value="90" step="0.1"><br><br>
Pick the central meridian <input name="meridian" type="number" min="-180" max="180">

...SECTION OUTPUT-WIDTH-CALCULATIONS:
return meridian*2;

...SECTION OUTPUT-HEIGHT-CALCULATIONS:
return meridian;

...SECTION MERIDIAN-LENGTH-CALCULATIONS:
return width/2;